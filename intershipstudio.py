# -*- coding: utf-8 -*-
"""Intershipstudio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_WXdUVWAhisTPD74JwicfjZw6wvxIqEP
"""

#Importing required libraries .
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from matplotlib.colors import ListedColormap

#Loading data 
data = pd.read_excel('/content/Bank_Personal_Loan_Modelling.xlsx','Data')
df = pd.DataFrame(data)

#To show initial data 
df.head()

#To check data shape
df.shape #5000,14

#Removing unwanted data from data sheet .
df.drop(df.columns[[0,4]],axis=1,inplace= True)

#statisticle summary.
df.info()
df.isnull().sum()
df.nunique()

#Number of people with 0 mortage .
sum(df['Mortgage'] == 0 )

#Number of peoples with 0 credit card spending per month .
sum(df['CCAvg'] == 0)

#Value counts of all categorical columns .
df.select_dtypes(include=['object']).dtypes.sum()
df[df.dtypes[(df.dtypes=="float63")|(df.dtypes=="int64")]
                        .index.values].hist(figsize=[11,11])
col_names = ['Age','Experience','Income','Family','CCAvg','Education','Mortgage','Personal Loan','Securities Account','CD Account','Online','CreditCard']
fig,ax = plt.subplots(len(col_names),figsize=(12,40))
for i, col_val in enumerate(col_names):
    sns.boxplot(y=df[col_val], ax=ax[i])
    ax[i].set_title('Box plot - {}'.format(col_val), fontsize=10)
    ax[i].set_xlabel(col_val, fontsize=8)
plt.show()

#Removing outliers from data 
def percentile_based_outlier(data, threshold=95):
  diff = (100-threshold)/2
  minval, maxval = np.percentile(data, [diff, 100 - diff])
  return (data < minval) | (data > maxval)
col_names = ['Age','Experience','Income','Family','CCAvg','Education','Mortgage','Personal Loan','Securities Account','CD Account','Online','CreditCard']
fig,ax = plt.subplots(len(col_names), figsize=(8,40))
for i, col_val in enumerate(col_names):
    x = df[col_val][:5000]
    sns.distplot(x, ax=ax[i], rug=True, hist=False)
    outliers = x[percentile_based_outlier(x)]
    ax[i].plot(outliers, np.zeros_like(outliers), 'ro', clip_on=False)
    ax[i].set_title('Outlier detection - {}'.format(col_val), fontsize=10)
    ax[i].set_xlabel(col_val, fontsize=8)
plt.show()

# To chech Correlation 
fig,ax = plt.subplots(figsize=(20, 10))
corr = df.corr()
sns.heatmap(corr,
            xticklabels=corr.columns.values,
            yticklabels=corr.columns.values)

# Seprating required data 
X = df.iloc[:,[2,5,4]]
Y = df.iloc[:,7]

# Spliting data in to training and tests set .
x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = 0.30,random_state=0)

#Applying neccessary transformation .
sc_x = StandardScaler() 
x_train = sc_x.fit_transform(x_train)  
x_test = sc_x.transform(x_test)

from sklearn.ensemble import RandomForestRegressor

# Creating RandomForestRegressor MOdel.
regressor = RandomForestRegressor(n_estimators=12, random_state=0)

# Fitting data in to model 
regressor.fit(x_train, y_train)

# Predecting over test case 
pred = regressor.predict(x_test)

# Predicting over train data 
y_train_pred = regressor.predict(x_train)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
print(confusion_matrix(y_test,pred.round()))

print("Train Accuracy : "+ str(accuracy_score(y_train,y_train_pred.round())*100))
classification_report(y_test,pred.round())

print("Test Accuracy : " + str(accuracy_score(y_test, pred.round())*100))

#Visualizing the data for first 25 samples of actual and predicted values
plt.plot(Y[0:24],'bo',label = 'actual')
plt.plot(pred[0:24].round(), 'ro', label = 'Predicted')
plt.legend()
plt.xlabel('Number of samples'); plt.ylabel('Binary'); plt.title('Actual and Predicted Values');